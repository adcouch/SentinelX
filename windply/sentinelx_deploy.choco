# Define log file path
$LogPath = "C:\SentinelX\install_log.txt"

# Ensure the logging directory exists
if (!(Test-Path "C:\SentinelX")) {
    New-Item -ItemType Directory -Path "C:\SentinelX" | Out-Null
}

# Function to log messages
Function Write-Log {
    Param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$Timestamp - $Message" | Out-File -FilePath $LogPath -Append
}

# Start Logging
Write-Log "SentinelX deployment started."

# Create directories
$directories = @("C:\Temp", "C:\Data", "C:\Data\vms", "C:\data\vms\kali", "C:\payloads", "C:\tools")

foreach ($dir in $directories) {
    if (!(Test-Path $dir)) {
        New-Item -Path $dir -ItemType Directory -Force | Out-Null
        Write-Log "Created directory: $dir"
    }
}

# Set TEMP environment variables
$env:TEMP = "C:\Temp"
$env:TMP = "C:\Temp"
Write-Log "Set TEMP directory to C:\Temp"

# Configure Windows Defender
Write-Log "Configuring Windows Defender exclusions."
$excludePaths = @("C:\tools\", "C:\payloads\")
foreach ($path in $excludePaths) {
    Add-MpPreference -ExclusionPath $path -ErrorAction SilentlyContinue
    Write-Log "Added Defender exclusion: $path"
}

# Enable Chocolatey global confirmation
choco feature enable -n allowGlobalConfirmation

# Ensure Chocolatey is installed
if (!(Test-Path "C:\ProgramData\chocolatey\choco.exe")) {
    Write-Log "Chocolatey not found. Installing..."
    Set-ExecutionPolicy Bypass -Scope Process -Force
    Invoke-WebRequest -Uri https://community.chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression
    Write-Log "Chocolatey installed successfully."
} else {
    Write-Log "Chocolatey is already installed."
}

# Install required packages
$packages = @(
    "git", "vscode", "proxifier", "openjdk11", "sysinternals",
    "googlechrome", "7zip", "heidisql", "putty", "notepadplusplus",
    "OpenVPN", "python3", "dnspy", "nmap", "greenshot",
    "microsoft-windows-terminal"
)

foreach ($pkg in $packages) {
    Write-Log "Installing $pkg..."
    choco install -y $pkg --log-level=debug | Tee-Object -FilePath $LogPath -Append
    Write-Log "$pkg installation completed."
}

# Clone GitHub repositories
$repos = @{
    "kerbrute" = "https://github.com/ropnop/kerbrute.git"
    "Certify" = "https://github.com/GhostPack/Certify.git"
    "MailSniper" = "https://github.com/dafthack/MailSniper.git"
    "PowerSploit" = "https://github.com/PowerShellMafia/PowerSploit.git"
    "SharpHound3" = "https://github.com/BloodHoundAD/SharpHound3.git"
    "mimikatz" = "https://github.com/gentilkiwi/mimikatz.git"
    "SharpChrome" = "https://github.com/djhohnstein/SharpChrome.git"
    "PowerUpSQL" = "https://github.com/NetSPI/PowerUpSQL.git"
}

foreach ($repo in $repos.GetEnumerator()) {
    $path = "C:\tools\$($repo.Key)"
    if (!(Test-Path $path)) {
        git clone $repo.Value $path
        Write-Log "Cloned repository: $repo.Key"
    } else {
        Write-Log "Repository already exists: $repo.Key"
    }
}

# Download Kerbrute Binary
try {
    Write-Log "Downloading Kerbrute binary..."
    $apiUrl = "https://api.github.com/repos/ropnop/kerbrute/releases/latest"
    $latestRelease = Invoke-RestMethod -Uri $apiUrl
    $binaryUrl = $latestRelease.assets | Where-Object { $_.name -eq "kerbrute_windows_amd64.exe" } | Select-Object -ExpandProperty browser_download_url
    Invoke-WebRequest -Uri $binaryUrl -OutFile "C:\tools\kerbrute_windows_amd64.exe"
    Write-Log "Kerbrute binary downloaded."
} catch {
    Write-Log "Error downloading Kerbrute: $_"
}

# Download and Install BloodHound
try {
    Write-Log "Downloading BloodHound..."
    Invoke-WebRequest -Uri 'https://github.com/BloodHoundAD/BloodHound/releases/download/4.1.0/BloodHound-win32-x64.zip' -OutFile "$env:TEMP\BloodHound.zip"
    Expand-Archive -Path "$env:TEMP\BloodHound.zip" -DestinationPath C:\tools\
    Rename-Item -Path C:\tools\BloodHound-win32-x64\ -NewName BloodHound
    Write-Log "BloodHound installed."
} catch {
    Write-Log "Error downloading BloodHound: $_"
}

# System Hardening
Write-Log "Applying system hardening settings."
New-ItemProperty -Path "HKLM:\Software\Policies\Microsoft\Windows NT\DNSClient" -Name EnableMulticast -Value 0
New-ItemProperty -Path "HKLM:\Software\Policies\Microsoft\Internet Explorer\Main" -Name NotifyDisableIEOptions -Value 1
New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Cryptography\Wintrust\Config" -Name EnableCertPaddingCheck -Value 1
New-ItemProperty -Path "HKLM:\Software\Wow6432Node\Microsoft\Cryptography\Wintrust\Config" -Name EnableCertPaddingCheck -Value 1

Write-Log "System hardening settings applied."

# Cleanup
Write-Log "Cleaning up temporary files."
Remove-Item -Path C:\Temp\ -Recurse -Force -ErrorAction SilentlyContinue

Write-Log "SentinelX deployment completed successfully."
